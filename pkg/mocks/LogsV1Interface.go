// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/keptn/go-utils/pkg/api/models"
	mock "github.com/stretchr/testify/mock"
)

// LogsV1Interface is an autogenerated mock type for the LogsV1Interface type
type LogsV1Interface struct {
	mock.Mock
}

type LogsV1Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *LogsV1Interface) EXPECT() *LogsV1Interface_Expecter {
	return &LogsV1Interface_Expecter{mock: &_m.Mock}
}

// DeleteLogs provides a mock function with given fields: filter
func (_m *LogsV1Interface) DeleteLogs(filter models.LogFilter) error {
	ret := _m.Called(filter)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.LogFilter) error); ok {
		r0 = rf(filter)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogsV1Interface_DeleteLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteLogs'
type LogsV1Interface_DeleteLogs_Call struct {
	*mock.Call
}

// DeleteLogs is a helper method to define mock.On call
//  - filter models.LogFilter
func (_e *LogsV1Interface_Expecter) DeleteLogs(filter interface{}) *LogsV1Interface_DeleteLogs_Call {
	return &LogsV1Interface_DeleteLogs_Call{Call: _e.mock.On("DeleteLogs", filter)}
}

func (_c *LogsV1Interface_DeleteLogs_Call) Run(run func(filter models.LogFilter)) *LogsV1Interface_DeleteLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.LogFilter))
	})
	return _c
}

func (_c *LogsV1Interface_DeleteLogs_Call) Return(_a0 error) *LogsV1Interface_DeleteLogs_Call {
	_c.Call.Return(_a0)
	return _c
}

// Flush provides a mock function with given fields:
func (_m *LogsV1Interface) Flush() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LogsV1Interface_Flush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Flush'
type LogsV1Interface_Flush_Call struct {
	*mock.Call
}

// Flush is a helper method to define mock.On call
func (_e *LogsV1Interface_Expecter) Flush() *LogsV1Interface_Flush_Call {
	return &LogsV1Interface_Flush_Call{Call: _e.mock.On("Flush")}
}

func (_c *LogsV1Interface_Flush_Call) Run(run func()) *LogsV1Interface_Flush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *LogsV1Interface_Flush_Call) Return(_a0 error) *LogsV1Interface_Flush_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetLogs provides a mock function with given fields: params
func (_m *LogsV1Interface) GetLogs(params models.GetLogsParams) (*models.GetLogsResponse, error) {
	ret := _m.Called(params)

	var r0 *models.GetLogsResponse
	if rf, ok := ret.Get(0).(func(models.GetLogsParams) *models.GetLogsResponse); ok {
		r0 = rf(params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GetLogsResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.GetLogsParams) error); ok {
		r1 = rf(params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LogsV1Interface_GetLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetLogs'
type LogsV1Interface_GetLogs_Call struct {
	*mock.Call
}

// GetLogs is a helper method to define mock.On call
//  - params models.GetLogsParams
func (_e *LogsV1Interface_Expecter) GetLogs(params interface{}) *LogsV1Interface_GetLogs_Call {
	return &LogsV1Interface_GetLogs_Call{Call: _e.mock.On("GetLogs", params)}
}

func (_c *LogsV1Interface_GetLogs_Call) Run(run func(params models.GetLogsParams)) *LogsV1Interface_GetLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.GetLogsParams))
	})
	return _c
}

func (_c *LogsV1Interface_GetLogs_Call) Return(_a0 *models.GetLogsResponse, _a1 error) *LogsV1Interface_GetLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Log provides a mock function with given fields: logs
func (_m *LogsV1Interface) Log(logs []models.LogEntry) {
	_m.Called(logs)
}

// LogsV1Interface_Log_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Log'
type LogsV1Interface_Log_Call struct {
	*mock.Call
}

// Log is a helper method to define mock.On call
//  - logs []models.LogEntry
func (_e *LogsV1Interface_Expecter) Log(logs interface{}) *LogsV1Interface_Log_Call {
	return &LogsV1Interface_Log_Call{Call: _e.mock.On("Log", logs)}
}

func (_c *LogsV1Interface_Log_Call) Run(run func(logs []models.LogEntry)) *LogsV1Interface_Log_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]models.LogEntry))
	})
	return _c
}

func (_c *LogsV1Interface_Log_Call) Return() *LogsV1Interface_Log_Call {
	_c.Call.Return()
	return _c
}

// Start provides a mock function with given fields: ctx
func (_m *LogsV1Interface) Start(ctx context.Context) {
	_m.Called(ctx)
}

// LogsV1Interface_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type LogsV1Interface_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//  - ctx context.Context
func (_e *LogsV1Interface_Expecter) Start(ctx interface{}) *LogsV1Interface_Start_Call {
	return &LogsV1Interface_Start_Call{Call: _e.mock.On("Start", ctx)}
}

func (_c *LogsV1Interface_Start_Call) Run(run func(ctx context.Context)) *LogsV1Interface_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *LogsV1Interface_Start_Call) Return() *LogsV1Interface_Start_Call {
	_c.Call.Return()
	return _c
}
