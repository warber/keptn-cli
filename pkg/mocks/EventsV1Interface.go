// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	api "github.com/keptn/go-utils/pkg/api/utils"
	mock "github.com/stretchr/testify/mock"

	models "github.com/keptn/go-utils/pkg/api/models"

	time "time"
)

// EventsV1Interface is an autogenerated mock type for the EventsV1Interface type
type EventsV1Interface struct {
	mock.Mock
}

type EventsV1Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *EventsV1Interface) EXPECT() *EventsV1Interface_Expecter {
	return &EventsV1Interface_Expecter{mock: &_m.Mock}
}

// GetEvents provides a mock function with given fields: filter
func (_m *EventsV1Interface) GetEvents(filter *api.EventFilter) ([]*models.KeptnContextExtendedCE, *models.Error) {
	ret := _m.Called(filter)

	var r0 []*models.KeptnContextExtendedCE
	if rf, ok := ret.Get(0).(func(*api.EventFilter) []*models.KeptnContextExtendedCE); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.KeptnContextExtendedCE)
		}
	}

	var r1 *models.Error
	if rf, ok := ret.Get(1).(func(*api.EventFilter) *models.Error); ok {
		r1 = rf(filter)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Error)
		}
	}

	return r0, r1
}

// EventsV1Interface_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type EventsV1Interface_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
//  - filter *api.EventFilter
func (_e *EventsV1Interface_Expecter) GetEvents(filter interface{}) *EventsV1Interface_GetEvents_Call {
	return &EventsV1Interface_GetEvents_Call{Call: _e.mock.On("GetEvents", filter)}
}

func (_c *EventsV1Interface_GetEvents_Call) Run(run func(filter *api.EventFilter)) *EventsV1Interface_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*api.EventFilter))
	})
	return _c
}

func (_c *EventsV1Interface_GetEvents_Call) Return(_a0 []*models.KeptnContextExtendedCE, _a1 *models.Error) *EventsV1Interface_GetEvents_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetEventsWithRetry provides a mock function with given fields: filter, maxRetries, retrySleepTime
func (_m *EventsV1Interface) GetEventsWithRetry(filter *api.EventFilter, maxRetries int, retrySleepTime time.Duration) ([]*models.KeptnContextExtendedCE, error) {
	ret := _m.Called(filter, maxRetries, retrySleepTime)

	var r0 []*models.KeptnContextExtendedCE
	if rf, ok := ret.Get(0).(func(*api.EventFilter, int, time.Duration) []*models.KeptnContextExtendedCE); ok {
		r0 = rf(filter, maxRetries, retrySleepTime)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.KeptnContextExtendedCE)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*api.EventFilter, int, time.Duration) error); ok {
		r1 = rf(filter, maxRetries, retrySleepTime)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EventsV1Interface_GetEventsWithRetry_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEventsWithRetry'
type EventsV1Interface_GetEventsWithRetry_Call struct {
	*mock.Call
}

// GetEventsWithRetry is a helper method to define mock.On call
//  - filter *api.EventFilter
//  - maxRetries int
//  - retrySleepTime time.Duration
func (_e *EventsV1Interface_Expecter) GetEventsWithRetry(filter interface{}, maxRetries interface{}, retrySleepTime interface{}) *EventsV1Interface_GetEventsWithRetry_Call {
	return &EventsV1Interface_GetEventsWithRetry_Call{Call: _e.mock.On("GetEventsWithRetry", filter, maxRetries, retrySleepTime)}
}

func (_c *EventsV1Interface_GetEventsWithRetry_Call) Run(run func(filter *api.EventFilter, maxRetries int, retrySleepTime time.Duration)) *EventsV1Interface_GetEventsWithRetry_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*api.EventFilter), args[1].(int), args[2].(time.Duration))
	})
	return _c
}

func (_c *EventsV1Interface_GetEventsWithRetry_Call) Return(_a0 []*models.KeptnContextExtendedCE, _a1 error) *EventsV1Interface_GetEventsWithRetry_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
