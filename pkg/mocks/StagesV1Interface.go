// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	models "github.com/keptn/go-utils/pkg/api/models"
	mock "github.com/stretchr/testify/mock"
)

// StagesV1Interface is an autogenerated mock type for the StagesV1Interface type
type StagesV1Interface struct {
	mock.Mock
}

type StagesV1Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *StagesV1Interface) EXPECT() *StagesV1Interface_Expecter {
	return &StagesV1Interface_Expecter{mock: &_m.Mock}
}

// CreateStage provides a mock function with given fields: project, stageName
func (_m *StagesV1Interface) CreateStage(project string, stageName string) (*models.EventContext, *models.Error) {
	ret := _m.Called(project, stageName)

	var r0 *models.EventContext
	if rf, ok := ret.Get(0).(func(string, string) *models.EventContext); ok {
		r0 = rf(project, stageName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EventContext)
		}
	}

	var r1 *models.Error
	if rf, ok := ret.Get(1).(func(string, string) *models.Error); ok {
		r1 = rf(project, stageName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Error)
		}
	}

	return r0, r1
}

// StagesV1Interface_CreateStage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStage'
type StagesV1Interface_CreateStage_Call struct {
	*mock.Call
}

// CreateStage is a helper method to define mock.On call
//  - project string
//  - stageName string
func (_e *StagesV1Interface_Expecter) CreateStage(project interface{}, stageName interface{}) *StagesV1Interface_CreateStage_Call {
	return &StagesV1Interface_CreateStage_Call{Call: _e.mock.On("CreateStage", project, stageName)}
}

func (_c *StagesV1Interface_CreateStage_Call) Run(run func(project string, stageName string)) *StagesV1Interface_CreateStage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *StagesV1Interface_CreateStage_Call) Return(_a0 *models.EventContext, _a1 *models.Error) *StagesV1Interface_CreateStage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllStages provides a mock function with given fields: project
func (_m *StagesV1Interface) GetAllStages(project string) ([]*models.Stage, error) {
	ret := _m.Called(project)

	var r0 []*models.Stage
	if rf, ok := ret.Get(0).(func(string) []*models.Stage); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Stage)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(project)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// StagesV1Interface_GetAllStages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllStages'
type StagesV1Interface_GetAllStages_Call struct {
	*mock.Call
}

// GetAllStages is a helper method to define mock.On call
//  - project string
func (_e *StagesV1Interface_Expecter) GetAllStages(project interface{}) *StagesV1Interface_GetAllStages_Call {
	return &StagesV1Interface_GetAllStages_Call{Call: _e.mock.On("GetAllStages", project)}
}

func (_c *StagesV1Interface_GetAllStages_Call) Run(run func(project string)) *StagesV1Interface_GetAllStages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *StagesV1Interface_GetAllStages_Call) Return(_a0 []*models.Stage, _a1 error) *StagesV1Interface_GetAllStages_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
