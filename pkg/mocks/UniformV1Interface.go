// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	models "github.com/keptn/go-utils/pkg/api/models"
	mock "github.com/stretchr/testify/mock"
)

// UniformV1Interface is an autogenerated mock type for the UniformV1Interface type
type UniformV1Interface struct {
	mock.Mock
}

type UniformV1Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *UniformV1Interface) EXPECT() *UniformV1Interface_Expecter {
	return &UniformV1Interface_Expecter{mock: &_m.Mock}
}

// CreateSubscription provides a mock function with given fields: integrationID, subscription
func (_m *UniformV1Interface) CreateSubscription(integrationID string, subscription models.EventSubscription) (string, error) {
	ret := _m.Called(integrationID, subscription)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, models.EventSubscription) string); ok {
		r0 = rf(integrationID, subscription)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, models.EventSubscription) error); ok {
		r1 = rf(integrationID, subscription)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UniformV1Interface_CreateSubscription_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateSubscription'
type UniformV1Interface_CreateSubscription_Call struct {
	*mock.Call
}

// CreateSubscription is a helper method to define mock.On call
//  - integrationID string
//  - subscription models.EventSubscription
func (_e *UniformV1Interface_Expecter) CreateSubscription(integrationID interface{}, subscription interface{}) *UniformV1Interface_CreateSubscription_Call {
	return &UniformV1Interface_CreateSubscription_Call{Call: _e.mock.On("CreateSubscription", integrationID, subscription)}
}

func (_c *UniformV1Interface_CreateSubscription_Call) Run(run func(integrationID string, subscription models.EventSubscription)) *UniformV1Interface_CreateSubscription_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(models.EventSubscription))
	})
	return _c
}

func (_c *UniformV1Interface_CreateSubscription_Call) Return(_a0 string, _a1 error) *UniformV1Interface_CreateSubscription_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetRegistrations provides a mock function with given fields:
func (_m *UniformV1Interface) GetRegistrations() ([]*models.Integration, error) {
	ret := _m.Called()

	var r0 []*models.Integration
	if rf, ok := ret.Get(0).(func() []*models.Integration); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Integration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UniformV1Interface_GetRegistrations_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRegistrations'
type UniformV1Interface_GetRegistrations_Call struct {
	*mock.Call
}

// GetRegistrations is a helper method to define mock.On call
func (_e *UniformV1Interface_Expecter) GetRegistrations() *UniformV1Interface_GetRegistrations_Call {
	return &UniformV1Interface_GetRegistrations_Call{Call: _e.mock.On("GetRegistrations")}
}

func (_c *UniformV1Interface_GetRegistrations_Call) Run(run func()) *UniformV1Interface_GetRegistrations_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *UniformV1Interface_GetRegistrations_Call) Return(_a0 []*models.Integration, _a1 error) *UniformV1Interface_GetRegistrations_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Ping provides a mock function with given fields: integrationID
func (_m *UniformV1Interface) Ping(integrationID string) (*models.Integration, error) {
	ret := _m.Called(integrationID)

	var r0 *models.Integration
	if rf, ok := ret.Get(0).(func(string) *models.Integration); ok {
		r0 = rf(integrationID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Integration)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(integrationID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UniformV1Interface_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type UniformV1Interface_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//  - integrationID string
func (_e *UniformV1Interface_Expecter) Ping(integrationID interface{}) *UniformV1Interface_Ping_Call {
	return &UniformV1Interface_Ping_Call{Call: _e.mock.On("Ping", integrationID)}
}

func (_c *UniformV1Interface_Ping_Call) Run(run func(integrationID string)) *UniformV1Interface_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UniformV1Interface_Ping_Call) Return(_a0 *models.Integration, _a1 error) *UniformV1Interface_Ping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// RegisterIntegration provides a mock function with given fields: integration
func (_m *UniformV1Interface) RegisterIntegration(integration models.Integration) (string, error) {
	ret := _m.Called(integration)

	var r0 string
	if rf, ok := ret.Get(0).(func(models.Integration) string); ok {
		r0 = rf(integration)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Integration) error); ok {
		r1 = rf(integration)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UniformV1Interface_RegisterIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterIntegration'
type UniformV1Interface_RegisterIntegration_Call struct {
	*mock.Call
}

// RegisterIntegration is a helper method to define mock.On call
//  - integration models.Integration
func (_e *UniformV1Interface_Expecter) RegisterIntegration(integration interface{}) *UniformV1Interface_RegisterIntegration_Call {
	return &UniformV1Interface_RegisterIntegration_Call{Call: _e.mock.On("RegisterIntegration", integration)}
}

func (_c *UniformV1Interface_RegisterIntegration_Call) Run(run func(integration models.Integration)) *UniformV1Interface_RegisterIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Integration))
	})
	return _c
}

func (_c *UniformV1Interface_RegisterIntegration_Call) Return(_a0 string, _a1 error) *UniformV1Interface_RegisterIntegration_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UnregisterIntegration provides a mock function with given fields: integrationID
func (_m *UniformV1Interface) UnregisterIntegration(integrationID string) error {
	ret := _m.Called(integrationID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(integrationID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UniformV1Interface_UnregisterIntegration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UnregisterIntegration'
type UniformV1Interface_UnregisterIntegration_Call struct {
	*mock.Call
}

// UnregisterIntegration is a helper method to define mock.On call
//  - integrationID string
func (_e *UniformV1Interface_Expecter) UnregisterIntegration(integrationID interface{}) *UniformV1Interface_UnregisterIntegration_Call {
	return &UniformV1Interface_UnregisterIntegration_Call{Call: _e.mock.On("UnregisterIntegration", integrationID)}
}

func (_c *UniformV1Interface_UnregisterIntegration_Call) Run(run func(integrationID string)) *UniformV1Interface_UnregisterIntegration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *UniformV1Interface_UnregisterIntegration_Call) Return(_a0 error) *UniformV1Interface_UnregisterIntegration_Call {
	_c.Call.Return(_a0)
	return _c
}
