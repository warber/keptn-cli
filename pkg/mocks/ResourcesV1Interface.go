// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	models "github.com/keptn/go-utils/pkg/api/models"
	mock "github.com/stretchr/testify/mock"
)

// ResourcesV1Interface is an autogenerated mock type for the ResourcesV1Interface type
type ResourcesV1Interface struct {
	mock.Mock
}

type ResourcesV1Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *ResourcesV1Interface) EXPECT() *ResourcesV1Interface_Expecter {
	return &ResourcesV1Interface_Expecter{mock: &_m.Mock}
}

// CreateProjectResources provides a mock function with given fields: project, resources
func (_m *ResourcesV1Interface) CreateProjectResources(project string, resources []*models.Resource) (string, error) {
	ret := _m.Called(project, resources)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []*models.Resource) string); ok {
		r0 = rf(project, resources)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []*models.Resource) error); ok {
		r1 = rf(project, resources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcesV1Interface_CreateProjectResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProjectResources'
type ResourcesV1Interface_CreateProjectResources_Call struct {
	*mock.Call
}

// CreateProjectResources is a helper method to define mock.On call
//  - project string
//  - resources []*models.Resource
func (_e *ResourcesV1Interface_Expecter) CreateProjectResources(project interface{}, resources interface{}) *ResourcesV1Interface_CreateProjectResources_Call {
	return &ResourcesV1Interface_CreateProjectResources_Call{Call: _e.mock.On("CreateProjectResources", project, resources)}
}

func (_c *ResourcesV1Interface_CreateProjectResources_Call) Run(run func(project string, resources []*models.Resource)) *ResourcesV1Interface_CreateProjectResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]*models.Resource))
	})
	return _c
}

func (_c *ResourcesV1Interface_CreateProjectResources_Call) Return(_a0 string, _a1 error) *ResourcesV1Interface_CreateProjectResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateResources provides a mock function with given fields: project, stage, service, resources
func (_m *ResourcesV1Interface) CreateResources(project string, stage string, service string, resources []*models.Resource) (*models.EventContext, *models.Error) {
	ret := _m.Called(project, stage, service, resources)

	var r0 *models.EventContext
	if rf, ok := ret.Get(0).(func(string, string, string, []*models.Resource) *models.EventContext); ok {
		r0 = rf(project, stage, service, resources)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EventContext)
		}
	}

	var r1 *models.Error
	if rf, ok := ret.Get(1).(func(string, string, string, []*models.Resource) *models.Error); ok {
		r1 = rf(project, stage, service, resources)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Error)
		}
	}

	return r0, r1
}

// ResourcesV1Interface_CreateResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateResources'
type ResourcesV1Interface_CreateResources_Call struct {
	*mock.Call
}

// CreateResources is a helper method to define mock.On call
//  - project string
//  - stage string
//  - service string
//  - resources []*models.Resource
func (_e *ResourcesV1Interface_Expecter) CreateResources(project interface{}, stage interface{}, service interface{}, resources interface{}) *ResourcesV1Interface_CreateResources_Call {
	return &ResourcesV1Interface_CreateResources_Call{Call: _e.mock.On("CreateResources", project, stage, service, resources)}
}

func (_c *ResourcesV1Interface_CreateResources_Call) Run(run func(project string, stage string, service string, resources []*models.Resource)) *ResourcesV1Interface_CreateResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].([]*models.Resource))
	})
	return _c
}

func (_c *ResourcesV1Interface_CreateResources_Call) Return(_a0 *models.EventContext, _a1 *models.Error) *ResourcesV1Interface_CreateResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateServiceResources provides a mock function with given fields: project, stage, service, resources
func (_m *ResourcesV1Interface) CreateServiceResources(project string, stage string, service string, resources []*models.Resource) (string, error) {
	ret := _m.Called(project, stage, service, resources)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, []*models.Resource) string); ok {
		r0 = rf(project, stage, service, resources)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, []*models.Resource) error); ok {
		r1 = rf(project, stage, service, resources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcesV1Interface_CreateServiceResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServiceResources'
type ResourcesV1Interface_CreateServiceResources_Call struct {
	*mock.Call
}

// CreateServiceResources is a helper method to define mock.On call
//  - project string
//  - stage string
//  - service string
//  - resources []*models.Resource
func (_e *ResourcesV1Interface_Expecter) CreateServiceResources(project interface{}, stage interface{}, service interface{}, resources interface{}) *ResourcesV1Interface_CreateServiceResources_Call {
	return &ResourcesV1Interface_CreateServiceResources_Call{Call: _e.mock.On("CreateServiceResources", project, stage, service, resources)}
}

func (_c *ResourcesV1Interface_CreateServiceResources_Call) Run(run func(project string, stage string, service string, resources []*models.Resource)) *ResourcesV1Interface_CreateServiceResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].([]*models.Resource))
	})
	return _c
}

func (_c *ResourcesV1Interface_CreateServiceResources_Call) Return(_a0 string, _a1 error) *ResourcesV1Interface_CreateServiceResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// CreateStageResources provides a mock function with given fields: project, stage, resources
func (_m *ResourcesV1Interface) CreateStageResources(project string, stage string, resources []*models.Resource) (string, error) {
	ret := _m.Called(project, stage, resources)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, []*models.Resource) string); ok {
		r0 = rf(project, stage, resources)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []*models.Resource) error); ok {
		r1 = rf(project, stage, resources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcesV1Interface_CreateStageResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateStageResources'
type ResourcesV1Interface_CreateStageResources_Call struct {
	*mock.Call
}

// CreateStageResources is a helper method to define mock.On call
//  - project string
//  - stage string
//  - resources []*models.Resource
func (_e *ResourcesV1Interface_Expecter) CreateStageResources(project interface{}, stage interface{}, resources interface{}) *ResourcesV1Interface_CreateStageResources_Call {
	return &ResourcesV1Interface_CreateStageResources_Call{Call: _e.mock.On("CreateStageResources", project, stage, resources)}
}

func (_c *ResourcesV1Interface_CreateStageResources_Call) Run(run func(project string, stage string, resources []*models.Resource)) *ResourcesV1Interface_CreateStageResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]*models.Resource))
	})
	return _c
}

func (_c *ResourcesV1Interface_CreateStageResources_Call) Return(_a0 string, _a1 error) *ResourcesV1Interface_CreateStageResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteProjectResource provides a mock function with given fields: project, resourceURI
func (_m *ResourcesV1Interface) DeleteProjectResource(project string, resourceURI string) error {
	ret := _m.Called(project, resourceURI)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(project, resourceURI)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourcesV1Interface_DeleteProjectResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProjectResource'
type ResourcesV1Interface_DeleteProjectResource_Call struct {
	*mock.Call
}

// DeleteProjectResource is a helper method to define mock.On call
//  - project string
//  - resourceURI string
func (_e *ResourcesV1Interface_Expecter) DeleteProjectResource(project interface{}, resourceURI interface{}) *ResourcesV1Interface_DeleteProjectResource_Call {
	return &ResourcesV1Interface_DeleteProjectResource_Call{Call: _e.mock.On("DeleteProjectResource", project, resourceURI)}
}

func (_c *ResourcesV1Interface_DeleteProjectResource_Call) Run(run func(project string, resourceURI string)) *ResourcesV1Interface_DeleteProjectResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ResourcesV1Interface_DeleteProjectResource_Call) Return(_a0 error) *ResourcesV1Interface_DeleteProjectResource_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteServiceResource provides a mock function with given fields: project, stage, service, resourceURI
func (_m *ResourcesV1Interface) DeleteServiceResource(project string, stage string, service string, resourceURI string) error {
	ret := _m.Called(project, stage, service, resourceURI)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, string) error); ok {
		r0 = rf(project, stage, service, resourceURI)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourcesV1Interface_DeleteServiceResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteServiceResource'
type ResourcesV1Interface_DeleteServiceResource_Call struct {
	*mock.Call
}

// DeleteServiceResource is a helper method to define mock.On call
//  - project string
//  - stage string
//  - service string
//  - resourceURI string
func (_e *ResourcesV1Interface_Expecter) DeleteServiceResource(project interface{}, stage interface{}, service interface{}, resourceURI interface{}) *ResourcesV1Interface_DeleteServiceResource_Call {
	return &ResourcesV1Interface_DeleteServiceResource_Call{Call: _e.mock.On("DeleteServiceResource", project, stage, service, resourceURI)}
}

func (_c *ResourcesV1Interface_DeleteServiceResource_Call) Run(run func(project string, stage string, service string, resourceURI string)) *ResourcesV1Interface_DeleteServiceResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ResourcesV1Interface_DeleteServiceResource_Call) Return(_a0 error) *ResourcesV1Interface_DeleteServiceResource_Call {
	_c.Call.Return(_a0)
	return _c
}

// DeleteStageResource provides a mock function with given fields: project, stage, resourceURI
func (_m *ResourcesV1Interface) DeleteStageResource(project string, stage string, resourceURI string) error {
	ret := _m.Called(project, stage, resourceURI)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string) error); ok {
		r0 = rf(project, stage, resourceURI)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResourcesV1Interface_DeleteStageResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteStageResource'
type ResourcesV1Interface_DeleteStageResource_Call struct {
	*mock.Call
}

// DeleteStageResource is a helper method to define mock.On call
//  - project string
//  - stage string
//  - resourceURI string
func (_e *ResourcesV1Interface_Expecter) DeleteStageResource(project interface{}, stage interface{}, resourceURI interface{}) *ResourcesV1Interface_DeleteStageResource_Call {
	return &ResourcesV1Interface_DeleteStageResource_Call{Call: _e.mock.On("DeleteStageResource", project, stage, resourceURI)}
}

func (_c *ResourcesV1Interface_DeleteStageResource_Call) Run(run func(project string, stage string, resourceURI string)) *ResourcesV1Interface_DeleteStageResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ResourcesV1Interface_DeleteStageResource_Call) Return(_a0 error) *ResourcesV1Interface_DeleteStageResource_Call {
	_c.Call.Return(_a0)
	return _c
}

// GetAllServiceResources provides a mock function with given fields: project, stage, service
func (_m *ResourcesV1Interface) GetAllServiceResources(project string, stage string, service string) ([]*models.Resource, error) {
	ret := _m.Called(project, stage, service)

	var r0 []*models.Resource
	if rf, ok := ret.Get(0).(func(string, string, string) []*models.Resource); ok {
		r0 = rf(project, stage, service)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(project, stage, service)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcesV1Interface_GetAllServiceResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllServiceResources'
type ResourcesV1Interface_GetAllServiceResources_Call struct {
	*mock.Call
}

// GetAllServiceResources is a helper method to define mock.On call
//  - project string
//  - stage string
//  - service string
func (_e *ResourcesV1Interface_Expecter) GetAllServiceResources(project interface{}, stage interface{}, service interface{}) *ResourcesV1Interface_GetAllServiceResources_Call {
	return &ResourcesV1Interface_GetAllServiceResources_Call{Call: _e.mock.On("GetAllServiceResources", project, stage, service)}
}

func (_c *ResourcesV1Interface_GetAllServiceResources_Call) Run(run func(project string, stage string, service string)) *ResourcesV1Interface_GetAllServiceResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ResourcesV1Interface_GetAllServiceResources_Call) Return(_a0 []*models.Resource, _a1 error) *ResourcesV1Interface_GetAllServiceResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllStageResources provides a mock function with given fields: project, stage
func (_m *ResourcesV1Interface) GetAllStageResources(project string, stage string) ([]*models.Resource, error) {
	ret := _m.Called(project, stage)

	var r0 []*models.Resource
	if rf, ok := ret.Get(0).(func(string, string) []*models.Resource); ok {
		r0 = rf(project, stage)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(project, stage)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcesV1Interface_GetAllStageResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllStageResources'
type ResourcesV1Interface_GetAllStageResources_Call struct {
	*mock.Call
}

// GetAllStageResources is a helper method to define mock.On call
//  - project string
//  - stage string
func (_e *ResourcesV1Interface_Expecter) GetAllStageResources(project interface{}, stage interface{}) *ResourcesV1Interface_GetAllStageResources_Call {
	return &ResourcesV1Interface_GetAllStageResources_Call{Call: _e.mock.On("GetAllStageResources", project, stage)}
}

func (_c *ResourcesV1Interface_GetAllStageResources_Call) Run(run func(project string, stage string)) *ResourcesV1Interface_GetAllStageResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ResourcesV1Interface_GetAllStageResources_Call) Return(_a0 []*models.Resource, _a1 error) *ResourcesV1Interface_GetAllStageResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetProjectResource provides a mock function with given fields: project, resourceURI
func (_m *ResourcesV1Interface) GetProjectResource(project string, resourceURI string) (*models.Resource, error) {
	ret := _m.Called(project, resourceURI)

	var r0 *models.Resource
	if rf, ok := ret.Get(0).(func(string, string) *models.Resource); ok {
		r0 = rf(project, resourceURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(project, resourceURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcesV1Interface_GetProjectResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProjectResource'
type ResourcesV1Interface_GetProjectResource_Call struct {
	*mock.Call
}

// GetProjectResource is a helper method to define mock.On call
//  - project string
//  - resourceURI string
func (_e *ResourcesV1Interface_Expecter) GetProjectResource(project interface{}, resourceURI interface{}) *ResourcesV1Interface_GetProjectResource_Call {
	return &ResourcesV1Interface_GetProjectResource_Call{Call: _e.mock.On("GetProjectResource", project, resourceURI)}
}

func (_c *ResourcesV1Interface_GetProjectResource_Call) Run(run func(project string, resourceURI string)) *ResourcesV1Interface_GetProjectResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *ResourcesV1Interface_GetProjectResource_Call) Return(_a0 *models.Resource, _a1 error) *ResourcesV1Interface_GetProjectResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetServiceResource provides a mock function with given fields: project, stage, service, resourceURI
func (_m *ResourcesV1Interface) GetServiceResource(project string, stage string, service string, resourceURI string) (*models.Resource, error) {
	ret := _m.Called(project, stage, service, resourceURI)

	var r0 *models.Resource
	if rf, ok := ret.Get(0).(func(string, string, string, string) *models.Resource); ok {
		r0 = rf(project, stage, service, resourceURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(project, stage, service, resourceURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcesV1Interface_GetServiceResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServiceResource'
type ResourcesV1Interface_GetServiceResource_Call struct {
	*mock.Call
}

// GetServiceResource is a helper method to define mock.On call
//  - project string
//  - stage string
//  - service string
//  - resourceURI string
func (_e *ResourcesV1Interface_Expecter) GetServiceResource(project interface{}, stage interface{}, service interface{}, resourceURI interface{}) *ResourcesV1Interface_GetServiceResource_Call {
	return &ResourcesV1Interface_GetServiceResource_Call{Call: _e.mock.On("GetServiceResource", project, stage, service, resourceURI)}
}

func (_c *ResourcesV1Interface_GetServiceResource_Call) Run(run func(project string, stage string, service string, resourceURI string)) *ResourcesV1Interface_GetServiceResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(string))
	})
	return _c
}

func (_c *ResourcesV1Interface_GetServiceResource_Call) Return(_a0 *models.Resource, _a1 error) *ResourcesV1Interface_GetServiceResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetStageResource provides a mock function with given fields: project, stage, resourceURI
func (_m *ResourcesV1Interface) GetStageResource(project string, stage string, resourceURI string) (*models.Resource, error) {
	ret := _m.Called(project, stage, resourceURI)

	var r0 *models.Resource
	if rf, ok := ret.Get(0).(func(string, string, string) *models.Resource); ok {
		r0 = rf(project, stage, resourceURI)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Resource)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(project, stage, resourceURI)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcesV1Interface_GetStageResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetStageResource'
type ResourcesV1Interface_GetStageResource_Call struct {
	*mock.Call
}

// GetStageResource is a helper method to define mock.On call
//  - project string
//  - stage string
//  - resourceURI string
func (_e *ResourcesV1Interface_Expecter) GetStageResource(project interface{}, stage interface{}, resourceURI interface{}) *ResourcesV1Interface_GetStageResource_Call {
	return &ResourcesV1Interface_GetStageResource_Call{Call: _e.mock.On("GetStageResource", project, stage, resourceURI)}
}

func (_c *ResourcesV1Interface_GetStageResource_Call) Run(run func(project string, stage string, resourceURI string)) *ResourcesV1Interface_GetStageResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *ResourcesV1Interface_GetStageResource_Call) Return(_a0 *models.Resource, _a1 error) *ResourcesV1Interface_GetStageResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateProjectResource provides a mock function with given fields: project, resource
func (_m *ResourcesV1Interface) UpdateProjectResource(project string, resource *models.Resource) (string, error) {
	ret := _m.Called(project, resource)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, *models.Resource) string); ok {
		r0 = rf(project, resource)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, *models.Resource) error); ok {
		r1 = rf(project, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcesV1Interface_UpdateProjectResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectResource'
type ResourcesV1Interface_UpdateProjectResource_Call struct {
	*mock.Call
}

// UpdateProjectResource is a helper method to define mock.On call
//  - project string
//  - resource *models.Resource
func (_e *ResourcesV1Interface_Expecter) UpdateProjectResource(project interface{}, resource interface{}) *ResourcesV1Interface_UpdateProjectResource_Call {
	return &ResourcesV1Interface_UpdateProjectResource_Call{Call: _e.mock.On("UpdateProjectResource", project, resource)}
}

func (_c *ResourcesV1Interface_UpdateProjectResource_Call) Run(run func(project string, resource *models.Resource)) *ResourcesV1Interface_UpdateProjectResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*models.Resource))
	})
	return _c
}

func (_c *ResourcesV1Interface_UpdateProjectResource_Call) Return(_a0 string, _a1 error) *ResourcesV1Interface_UpdateProjectResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateProjectResources provides a mock function with given fields: project, resources
func (_m *ResourcesV1Interface) UpdateProjectResources(project string, resources []*models.Resource) (string, error) {
	ret := _m.Called(project, resources)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, []*models.Resource) string); ok {
		r0 = rf(project, resources)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, []*models.Resource) error); ok {
		r1 = rf(project, resources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcesV1Interface_UpdateProjectResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateProjectResources'
type ResourcesV1Interface_UpdateProjectResources_Call struct {
	*mock.Call
}

// UpdateProjectResources is a helper method to define mock.On call
//  - project string
//  - resources []*models.Resource
func (_e *ResourcesV1Interface_Expecter) UpdateProjectResources(project interface{}, resources interface{}) *ResourcesV1Interface_UpdateProjectResources_Call {
	return &ResourcesV1Interface_UpdateProjectResources_Call{Call: _e.mock.On("UpdateProjectResources", project, resources)}
}

func (_c *ResourcesV1Interface_UpdateProjectResources_Call) Run(run func(project string, resources []*models.Resource)) *ResourcesV1Interface_UpdateProjectResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].([]*models.Resource))
	})
	return _c
}

func (_c *ResourcesV1Interface_UpdateProjectResources_Call) Return(_a0 string, _a1 error) *ResourcesV1Interface_UpdateProjectResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateServiceResource provides a mock function with given fields: project, stage, service, resource
func (_m *ResourcesV1Interface) UpdateServiceResource(project string, stage string, service string, resource *models.Resource) (string, error) {
	ret := _m.Called(project, stage, service, resource)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, *models.Resource) string); ok {
		r0 = rf(project, stage, service, resource)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, *models.Resource) error); ok {
		r1 = rf(project, stage, service, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcesV1Interface_UpdateServiceResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceResource'
type ResourcesV1Interface_UpdateServiceResource_Call struct {
	*mock.Call
}

// UpdateServiceResource is a helper method to define mock.On call
//  - project string
//  - stage string
//  - service string
//  - resource *models.Resource
func (_e *ResourcesV1Interface_Expecter) UpdateServiceResource(project interface{}, stage interface{}, service interface{}, resource interface{}) *ResourcesV1Interface_UpdateServiceResource_Call {
	return &ResourcesV1Interface_UpdateServiceResource_Call{Call: _e.mock.On("UpdateServiceResource", project, stage, service, resource)}
}

func (_c *ResourcesV1Interface_UpdateServiceResource_Call) Run(run func(project string, stage string, service string, resource *models.Resource)) *ResourcesV1Interface_UpdateServiceResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].(*models.Resource))
	})
	return _c
}

func (_c *ResourcesV1Interface_UpdateServiceResource_Call) Return(_a0 string, _a1 error) *ResourcesV1Interface_UpdateServiceResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateServiceResources provides a mock function with given fields: project, stage, service, resources
func (_m *ResourcesV1Interface) UpdateServiceResources(project string, stage string, service string, resources []*models.Resource) (string, error) {
	ret := _m.Called(project, stage, service, resources)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, string, []*models.Resource) string); ok {
		r0 = rf(project, stage, service, resources)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, []*models.Resource) error); ok {
		r1 = rf(project, stage, service, resources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcesV1Interface_UpdateServiceResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateServiceResources'
type ResourcesV1Interface_UpdateServiceResources_Call struct {
	*mock.Call
}

// UpdateServiceResources is a helper method to define mock.On call
//  - project string
//  - stage string
//  - service string
//  - resources []*models.Resource
func (_e *ResourcesV1Interface_Expecter) UpdateServiceResources(project interface{}, stage interface{}, service interface{}, resources interface{}) *ResourcesV1Interface_UpdateServiceResources_Call {
	return &ResourcesV1Interface_UpdateServiceResources_Call{Call: _e.mock.On("UpdateServiceResources", project, stage, service, resources)}
}

func (_c *ResourcesV1Interface_UpdateServiceResources_Call) Run(run func(project string, stage string, service string, resources []*models.Resource)) *ResourcesV1Interface_UpdateServiceResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(string), args[3].([]*models.Resource))
	})
	return _c
}

func (_c *ResourcesV1Interface_UpdateServiceResources_Call) Return(_a0 string, _a1 error) *ResourcesV1Interface_UpdateServiceResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateStageResource provides a mock function with given fields: project, stage, resource
func (_m *ResourcesV1Interface) UpdateStageResource(project string, stage string, resource *models.Resource) (string, error) {
	ret := _m.Called(project, stage, resource)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, *models.Resource) string); ok {
		r0 = rf(project, stage, resource)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, *models.Resource) error); ok {
		r1 = rf(project, stage, resource)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcesV1Interface_UpdateStageResource_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStageResource'
type ResourcesV1Interface_UpdateStageResource_Call struct {
	*mock.Call
}

// UpdateStageResource is a helper method to define mock.On call
//  - project string
//  - stage string
//  - resource *models.Resource
func (_e *ResourcesV1Interface_Expecter) UpdateStageResource(project interface{}, stage interface{}, resource interface{}) *ResourcesV1Interface_UpdateStageResource_Call {
	return &ResourcesV1Interface_UpdateStageResource_Call{Call: _e.mock.On("UpdateStageResource", project, stage, resource)}
}

func (_c *ResourcesV1Interface_UpdateStageResource_Call) Run(run func(project string, stage string, resource *models.Resource)) *ResourcesV1Interface_UpdateStageResource_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].(*models.Resource))
	})
	return _c
}

func (_c *ResourcesV1Interface_UpdateStageResource_Call) Return(_a0 string, _a1 error) *ResourcesV1Interface_UpdateStageResource_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateStageResources provides a mock function with given fields: project, stage, resources
func (_m *ResourcesV1Interface) UpdateStageResources(project string, stage string, resources []*models.Resource) (string, error) {
	ret := _m.Called(project, stage, resources)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, string, []*models.Resource) string); ok {
		r0 = rf(project, stage, resources)
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, []*models.Resource) error); ok {
		r1 = rf(project, stage, resources)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResourcesV1Interface_UpdateStageResources_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateStageResources'
type ResourcesV1Interface_UpdateStageResources_Call struct {
	*mock.Call
}

// UpdateStageResources is a helper method to define mock.On call
//  - project string
//  - stage string
//  - resources []*models.Resource
func (_e *ResourcesV1Interface_Expecter) UpdateStageResources(project interface{}, stage interface{}, resources interface{}) *ResourcesV1Interface_UpdateStageResources_Call {
	return &ResourcesV1Interface_UpdateStageResources_Call{Call: _e.mock.On("UpdateStageResources", project, stage, resources)}
}

func (_c *ResourcesV1Interface_UpdateStageResources_Call) Run(run func(project string, stage string, resources []*models.Resource)) *ResourcesV1Interface_UpdateStageResources_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string), args[2].([]*models.Resource))
	})
	return _c
}

func (_c *ResourcesV1Interface_UpdateStageResources_Call) Return(_a0 string, _a1 error) *ResourcesV1Interface_UpdateStageResources_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
