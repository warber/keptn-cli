// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	models "github.com/keptn/go-utils/pkg/api/models"
	mock "github.com/stretchr/testify/mock"
)

// ProjectsV1Interface is an autogenerated mock type for the ProjectsV1Interface type
type ProjectsV1Interface struct {
	mock.Mock
}

type ProjectsV1Interface_Expecter struct {
	mock *mock.Mock
}

func (_m *ProjectsV1Interface) EXPECT() *ProjectsV1Interface_Expecter {
	return &ProjectsV1Interface_Expecter{mock: &_m.Mock}
}

// CreateProject provides a mock function with given fields: project
func (_m *ProjectsV1Interface) CreateProject(project models.Project) (*models.EventContext, *models.Error) {
	ret := _m.Called(project)

	var r0 *models.EventContext
	if rf, ok := ret.Get(0).(func(models.Project) *models.EventContext); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EventContext)
		}
	}

	var r1 *models.Error
	if rf, ok := ret.Get(1).(func(models.Project) *models.Error); ok {
		r1 = rf(project)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Error)
		}
	}

	return r0, r1
}

// ProjectsV1Interface_CreateProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateProject'
type ProjectsV1Interface_CreateProject_Call struct {
	*mock.Call
}

// CreateProject is a helper method to define mock.On call
//  - project models.Project
func (_e *ProjectsV1Interface_Expecter) CreateProject(project interface{}) *ProjectsV1Interface_CreateProject_Call {
	return &ProjectsV1Interface_CreateProject_Call{Call: _e.mock.On("CreateProject", project)}
}

func (_c *ProjectsV1Interface_CreateProject_Call) Run(run func(project models.Project)) *ProjectsV1Interface_CreateProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Project))
	})
	return _c
}

func (_c *ProjectsV1Interface_CreateProject_Call) Return(_a0 *models.EventContext, _a1 *models.Error) *ProjectsV1Interface_CreateProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// DeleteProject provides a mock function with given fields: project
func (_m *ProjectsV1Interface) DeleteProject(project models.Project) (*models.EventContext, *models.Error) {
	ret := _m.Called(project)

	var r0 *models.EventContext
	if rf, ok := ret.Get(0).(func(models.Project) *models.EventContext); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EventContext)
		}
	}

	var r1 *models.Error
	if rf, ok := ret.Get(1).(func(models.Project) *models.Error); ok {
		r1 = rf(project)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Error)
		}
	}

	return r0, r1
}

// ProjectsV1Interface_DeleteProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteProject'
type ProjectsV1Interface_DeleteProject_Call struct {
	*mock.Call
}

// DeleteProject is a helper method to define mock.On call
//  - project models.Project
func (_e *ProjectsV1Interface_Expecter) DeleteProject(project interface{}) *ProjectsV1Interface_DeleteProject_Call {
	return &ProjectsV1Interface_DeleteProject_Call{Call: _e.mock.On("DeleteProject", project)}
}

func (_c *ProjectsV1Interface_DeleteProject_Call) Run(run func(project models.Project)) *ProjectsV1Interface_DeleteProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Project))
	})
	return _c
}

func (_c *ProjectsV1Interface_DeleteProject_Call) Return(_a0 *models.EventContext, _a1 *models.Error) *ProjectsV1Interface_DeleteProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetAllProjects provides a mock function with given fields:
func (_m *ProjectsV1Interface) GetAllProjects() ([]*models.Project, error) {
	ret := _m.Called()

	var r0 []*models.Project
	if rf, ok := ret.Get(0).(func() []*models.Project); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Project)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ProjectsV1Interface_GetAllProjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAllProjects'
type ProjectsV1Interface_GetAllProjects_Call struct {
	*mock.Call
}

// GetAllProjects is a helper method to define mock.On call
func (_e *ProjectsV1Interface_Expecter) GetAllProjects() *ProjectsV1Interface_GetAllProjects_Call {
	return &ProjectsV1Interface_GetAllProjects_Call{Call: _e.mock.On("GetAllProjects")}
}

func (_c *ProjectsV1Interface_GetAllProjects_Call) Run(run func()) *ProjectsV1Interface_GetAllProjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ProjectsV1Interface_GetAllProjects_Call) Return(_a0 []*models.Project, _a1 error) *ProjectsV1Interface_GetAllProjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetProject provides a mock function with given fields: project
func (_m *ProjectsV1Interface) GetProject(project models.Project) (*models.Project, *models.Error) {
	ret := _m.Called(project)

	var r0 *models.Project
	if rf, ok := ret.Get(0).(func(models.Project) *models.Project); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Project)
		}
	}

	var r1 *models.Error
	if rf, ok := ret.Get(1).(func(models.Project) *models.Error); ok {
		r1 = rf(project)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Error)
		}
	}

	return r0, r1
}

// ProjectsV1Interface_GetProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetProject'
type ProjectsV1Interface_GetProject_Call struct {
	*mock.Call
}

// GetProject is a helper method to define mock.On call
//  - project models.Project
func (_e *ProjectsV1Interface_Expecter) GetProject(project interface{}) *ProjectsV1Interface_GetProject_Call {
	return &ProjectsV1Interface_GetProject_Call{Call: _e.mock.On("GetProject", project)}
}

func (_c *ProjectsV1Interface_GetProject_Call) Run(run func(project models.Project)) *ProjectsV1Interface_GetProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Project))
	})
	return _c
}

func (_c *ProjectsV1Interface_GetProject_Call) Return(_a0 *models.Project, _a1 *models.Error) *ProjectsV1Interface_GetProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// UpdateConfigurationServiceProject provides a mock function with given fields: project
func (_m *ProjectsV1Interface) UpdateConfigurationServiceProject(project models.Project) (*models.EventContext, *models.Error) {
	ret := _m.Called(project)

	var r0 *models.EventContext
	if rf, ok := ret.Get(0).(func(models.Project) *models.EventContext); ok {
		r0 = rf(project)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.EventContext)
		}
	}

	var r1 *models.Error
	if rf, ok := ret.Get(1).(func(models.Project) *models.Error); ok {
		r1 = rf(project)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Error)
		}
	}

	return r0, r1
}

// ProjectsV1Interface_UpdateConfigurationServiceProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateConfigurationServiceProject'
type ProjectsV1Interface_UpdateConfigurationServiceProject_Call struct {
	*mock.Call
}

// UpdateConfigurationServiceProject is a helper method to define mock.On call
//  - project models.Project
func (_e *ProjectsV1Interface_Expecter) UpdateConfigurationServiceProject(project interface{}) *ProjectsV1Interface_UpdateConfigurationServiceProject_Call {
	return &ProjectsV1Interface_UpdateConfigurationServiceProject_Call{Call: _e.mock.On("UpdateConfigurationServiceProject", project)}
}

func (_c *ProjectsV1Interface_UpdateConfigurationServiceProject_Call) Run(run func(project models.Project)) *ProjectsV1Interface_UpdateConfigurationServiceProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.Project))
	})
	return _c
}

func (_c *ProjectsV1Interface_UpdateConfigurationServiceProject_Call) Return(_a0 *models.EventContext, _a1 *models.Error) *ProjectsV1Interface_UpdateConfigurationServiceProject_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
