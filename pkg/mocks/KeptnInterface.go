// Code generated by mockery v2.10.0. DO NOT EDIT.

package mocks

import (
	api "github.com/keptn/go-utils/pkg/api/utils"
	mock "github.com/stretchr/testify/mock"
)

// KeptnInterface is an autogenerated mock type for the KeptnInterface type
type KeptnInterface struct {
	mock.Mock
}

type KeptnInterface_Expecter struct {
	mock *mock.Mock
}

func (_m *KeptnInterface) EXPECT() *KeptnInterface_Expecter {
	return &KeptnInterface_Expecter{mock: &_m.Mock}
}

// APIV1 provides a mock function with given fields:
func (_m *KeptnInterface) APIV1() api.APIV1Interface {
	ret := _m.Called()

	var r0 api.APIV1Interface
	if rf, ok := ret.Get(0).(func() api.APIV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.APIV1Interface)
		}
	}

	return r0
}

// KeptnInterface_APIV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'APIV1'
type KeptnInterface_APIV1_Call struct {
	*mock.Call
}

// APIV1 is a helper method to define mock.On call
func (_e *KeptnInterface_Expecter) APIV1() *KeptnInterface_APIV1_Call {
	return &KeptnInterface_APIV1_Call{Call: _e.mock.On("APIV1")}
}

func (_c *KeptnInterface_APIV1_Call) Run(run func()) *KeptnInterface_APIV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeptnInterface_APIV1_Call) Return(_a0 api.APIV1Interface) *KeptnInterface_APIV1_Call {
	_c.Call.Return(_a0)
	return _c
}

// AuthV1 provides a mock function with given fields:
func (_m *KeptnInterface) AuthV1() api.AuthV1Interface {
	ret := _m.Called()

	var r0 api.AuthV1Interface
	if rf, ok := ret.Get(0).(func() api.AuthV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.AuthV1Interface)
		}
	}

	return r0
}

// KeptnInterface_AuthV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AuthV1'
type KeptnInterface_AuthV1_Call struct {
	*mock.Call
}

// AuthV1 is a helper method to define mock.On call
func (_e *KeptnInterface_Expecter) AuthV1() *KeptnInterface_AuthV1_Call {
	return &KeptnInterface_AuthV1_Call{Call: _e.mock.On("AuthV1")}
}

func (_c *KeptnInterface_AuthV1_Call) Run(run func()) *KeptnInterface_AuthV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeptnInterface_AuthV1_Call) Return(_a0 api.AuthV1Interface) *KeptnInterface_AuthV1_Call {
	_c.Call.Return(_a0)
	return _c
}

// EventsV1 provides a mock function with given fields:
func (_m *KeptnInterface) EventsV1() api.EventsV1Interface {
	ret := _m.Called()

	var r0 api.EventsV1Interface
	if rf, ok := ret.Get(0).(func() api.EventsV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.EventsV1Interface)
		}
	}

	return r0
}

// KeptnInterface_EventsV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EventsV1'
type KeptnInterface_EventsV1_Call struct {
	*mock.Call
}

// EventsV1 is a helper method to define mock.On call
func (_e *KeptnInterface_Expecter) EventsV1() *KeptnInterface_EventsV1_Call {
	return &KeptnInterface_EventsV1_Call{Call: _e.mock.On("EventsV1")}
}

func (_c *KeptnInterface_EventsV1_Call) Run(run func()) *KeptnInterface_EventsV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeptnInterface_EventsV1_Call) Return(_a0 api.EventsV1Interface) *KeptnInterface_EventsV1_Call {
	_c.Call.Return(_a0)
	return _c
}

// LogsV1 provides a mock function with given fields:
func (_m *KeptnInterface) LogsV1() api.LogsV1Interface {
	ret := _m.Called()

	var r0 api.LogsV1Interface
	if rf, ok := ret.Get(0).(func() api.LogsV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.LogsV1Interface)
		}
	}

	return r0
}

// KeptnInterface_LogsV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogsV1'
type KeptnInterface_LogsV1_Call struct {
	*mock.Call
}

// LogsV1 is a helper method to define mock.On call
func (_e *KeptnInterface_Expecter) LogsV1() *KeptnInterface_LogsV1_Call {
	return &KeptnInterface_LogsV1_Call{Call: _e.mock.On("LogsV1")}
}

func (_c *KeptnInterface_LogsV1_Call) Run(run func()) *KeptnInterface_LogsV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeptnInterface_LogsV1_Call) Return(_a0 api.LogsV1Interface) *KeptnInterface_LogsV1_Call {
	_c.Call.Return(_a0)
	return _c
}

// ProjectsV1 provides a mock function with given fields:
func (_m *KeptnInterface) ProjectsV1() api.ProjectsV1Interface {
	ret := _m.Called()

	var r0 api.ProjectsV1Interface
	if rf, ok := ret.Get(0).(func() api.ProjectsV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.ProjectsV1Interface)
		}
	}

	return r0
}

// KeptnInterface_ProjectsV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProjectsV1'
type KeptnInterface_ProjectsV1_Call struct {
	*mock.Call
}

// ProjectsV1 is a helper method to define mock.On call
func (_e *KeptnInterface_Expecter) ProjectsV1() *KeptnInterface_ProjectsV1_Call {
	return &KeptnInterface_ProjectsV1_Call{Call: _e.mock.On("ProjectsV1")}
}

func (_c *KeptnInterface_ProjectsV1_Call) Run(run func()) *KeptnInterface_ProjectsV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeptnInterface_ProjectsV1_Call) Return(_a0 api.ProjectsV1Interface) *KeptnInterface_ProjectsV1_Call {
	_c.Call.Return(_a0)
	return _c
}

// ProxyV1 provides a mock function with given fields:
func (_m *KeptnInterface) ProxyV1() api.ProxyV1Interface {
	ret := _m.Called()

	var r0 api.ProxyV1Interface
	if rf, ok := ret.Get(0).(func() api.ProxyV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.ProxyV1Interface)
		}
	}

	return r0
}

// KeptnInterface_ProxyV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ProxyV1'
type KeptnInterface_ProxyV1_Call struct {
	*mock.Call
}

// ProxyV1 is a helper method to define mock.On call
func (_e *KeptnInterface_Expecter) ProxyV1() *KeptnInterface_ProxyV1_Call {
	return &KeptnInterface_ProxyV1_Call{Call: _e.mock.On("ProxyV1")}
}

func (_c *KeptnInterface_ProxyV1_Call) Run(run func()) *KeptnInterface_ProxyV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeptnInterface_ProxyV1_Call) Return(_a0 api.ProxyV1Interface) *KeptnInterface_ProxyV1_Call {
	_c.Call.Return(_a0)
	return _c
}

// ResourcesV1 provides a mock function with given fields:
func (_m *KeptnInterface) ResourcesV1() api.ResourcesV1Interface {
	ret := _m.Called()

	var r0 api.ResourcesV1Interface
	if rf, ok := ret.Get(0).(func() api.ResourcesV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.ResourcesV1Interface)
		}
	}

	return r0
}

// KeptnInterface_ResourcesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResourcesV1'
type KeptnInterface_ResourcesV1_Call struct {
	*mock.Call
}

// ResourcesV1 is a helper method to define mock.On call
func (_e *KeptnInterface_Expecter) ResourcesV1() *KeptnInterface_ResourcesV1_Call {
	return &KeptnInterface_ResourcesV1_Call{Call: _e.mock.On("ResourcesV1")}
}

func (_c *KeptnInterface_ResourcesV1_Call) Run(run func()) *KeptnInterface_ResourcesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeptnInterface_ResourcesV1_Call) Return(_a0 api.ResourcesV1Interface) *KeptnInterface_ResourcesV1_Call {
	_c.Call.Return(_a0)
	return _c
}

// SecretsV1 provides a mock function with given fields:
func (_m *KeptnInterface) SecretsV1() api.SecretsV1Interface {
	ret := _m.Called()

	var r0 api.SecretsV1Interface
	if rf, ok := ret.Get(0).(func() api.SecretsV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.SecretsV1Interface)
		}
	}

	return r0
}

// KeptnInterface_SecretsV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretsV1'
type KeptnInterface_SecretsV1_Call struct {
	*mock.Call
}

// SecretsV1 is a helper method to define mock.On call
func (_e *KeptnInterface_Expecter) SecretsV1() *KeptnInterface_SecretsV1_Call {
	return &KeptnInterface_SecretsV1_Call{Call: _e.mock.On("SecretsV1")}
}

func (_c *KeptnInterface_SecretsV1_Call) Run(run func()) *KeptnInterface_SecretsV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeptnInterface_SecretsV1_Call) Return(_a0 api.SecretsV1Interface) *KeptnInterface_SecretsV1_Call {
	_c.Call.Return(_a0)
	return _c
}

// SequencesV1 provides a mock function with given fields:
func (_m *KeptnInterface) SequencesV1() api.SequencesV1Interface {
	ret := _m.Called()

	var r0 api.SequencesV1Interface
	if rf, ok := ret.Get(0).(func() api.SequencesV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.SequencesV1Interface)
		}
	}

	return r0
}

// KeptnInterface_SequencesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SequencesV1'
type KeptnInterface_SequencesV1_Call struct {
	*mock.Call
}

// SequencesV1 is a helper method to define mock.On call
func (_e *KeptnInterface_Expecter) SequencesV1() *KeptnInterface_SequencesV1_Call {
	return &KeptnInterface_SequencesV1_Call{Call: _e.mock.On("SequencesV1")}
}

func (_c *KeptnInterface_SequencesV1_Call) Run(run func()) *KeptnInterface_SequencesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeptnInterface_SequencesV1_Call) Return(_a0 api.SequencesV1Interface) *KeptnInterface_SequencesV1_Call {
	_c.Call.Return(_a0)
	return _c
}

// ServicesV1 provides a mock function with given fields:
func (_m *KeptnInterface) ServicesV1() api.ServicesV1Interface {
	ret := _m.Called()

	var r0 api.ServicesV1Interface
	if rf, ok := ret.Get(0).(func() api.ServicesV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.ServicesV1Interface)
		}
	}

	return r0
}

// KeptnInterface_ServicesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServicesV1'
type KeptnInterface_ServicesV1_Call struct {
	*mock.Call
}

// ServicesV1 is a helper method to define mock.On call
func (_e *KeptnInterface_Expecter) ServicesV1() *KeptnInterface_ServicesV1_Call {
	return &KeptnInterface_ServicesV1_Call{Call: _e.mock.On("ServicesV1")}
}

func (_c *KeptnInterface_ServicesV1_Call) Run(run func()) *KeptnInterface_ServicesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeptnInterface_ServicesV1_Call) Return(_a0 api.ServicesV1Interface) *KeptnInterface_ServicesV1_Call {
	_c.Call.Return(_a0)
	return _c
}

// ShipyardControlV1 provides a mock function with given fields:
func (_m *KeptnInterface) ShipyardControlV1() api.ShipyardControlV1Interface {
	ret := _m.Called()

	var r0 api.ShipyardControlV1Interface
	if rf, ok := ret.Get(0).(func() api.ShipyardControlV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.ShipyardControlV1Interface)
		}
	}

	return r0
}

// KeptnInterface_ShipyardControlV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ShipyardControlV1'
type KeptnInterface_ShipyardControlV1_Call struct {
	*mock.Call
}

// ShipyardControlV1 is a helper method to define mock.On call
func (_e *KeptnInterface_Expecter) ShipyardControlV1() *KeptnInterface_ShipyardControlV1_Call {
	return &KeptnInterface_ShipyardControlV1_Call{Call: _e.mock.On("ShipyardControlV1")}
}

func (_c *KeptnInterface_ShipyardControlV1_Call) Run(run func()) *KeptnInterface_ShipyardControlV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeptnInterface_ShipyardControlV1_Call) Return(_a0 api.ShipyardControlV1Interface) *KeptnInterface_ShipyardControlV1_Call {
	_c.Call.Return(_a0)
	return _c
}

// StagesV1 provides a mock function with given fields:
func (_m *KeptnInterface) StagesV1() api.StagesV1Interface {
	ret := _m.Called()

	var r0 api.StagesV1Interface
	if rf, ok := ret.Get(0).(func() api.StagesV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.StagesV1Interface)
		}
	}

	return r0
}

// KeptnInterface_StagesV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StagesV1'
type KeptnInterface_StagesV1_Call struct {
	*mock.Call
}

// StagesV1 is a helper method to define mock.On call
func (_e *KeptnInterface_Expecter) StagesV1() *KeptnInterface_StagesV1_Call {
	return &KeptnInterface_StagesV1_Call{Call: _e.mock.On("StagesV1")}
}

func (_c *KeptnInterface_StagesV1_Call) Run(run func()) *KeptnInterface_StagesV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeptnInterface_StagesV1_Call) Return(_a0 api.StagesV1Interface) *KeptnInterface_StagesV1_Call {
	_c.Call.Return(_a0)
	return _c
}

// UniformV1 provides a mock function with given fields:
func (_m *KeptnInterface) UniformV1() api.UniformV1Interface {
	ret := _m.Called()

	var r0 api.UniformV1Interface
	if rf, ok := ret.Get(0).(func() api.UniformV1Interface); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(api.UniformV1Interface)
		}
	}

	return r0
}

// KeptnInterface_UniformV1_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UniformV1'
type KeptnInterface_UniformV1_Call struct {
	*mock.Call
}

// UniformV1 is a helper method to define mock.On call
func (_e *KeptnInterface_Expecter) UniformV1() *KeptnInterface_UniformV1_Call {
	return &KeptnInterface_UniformV1_Call{Call: _e.mock.On("UniformV1")}
}

func (_c *KeptnInterface_UniformV1_Call) Run(run func()) *KeptnInterface_UniformV1_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KeptnInterface_UniformV1_Call) Return(_a0 api.UniformV1Interface) *KeptnInterface_UniformV1_Call {
	_c.Call.Return(_a0)
	return _c
}
